# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FstDecoder', [dirname(__file__)])
        except ImportError:
            import _FstDecoder
            return _FstDecoder
        if fp is not None:
            try:
                _mod = imp.load_module('_FstDecoder', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _FstDecoder = swig_import_helper()
    del swig_import_helper
else:
    import _FstDecoder
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FstDecoder.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _FstDecoder.SwigPyIterator_value(self)
    def incr(self, n = 1): return _FstDecoder.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _FstDecoder.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _FstDecoder.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _FstDecoder.SwigPyIterator_equal(self, *args)
    def copy(self): return _FstDecoder.SwigPyIterator_copy(self)
    def next(self): return _FstDecoder.SwigPyIterator_next(self)
    def __next__(self): return _FstDecoder.SwigPyIterator___next__(self)
    def previous(self): return _FstDecoder.SwigPyIterator_previous(self)
    def advance(self, *args): return _FstDecoder.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _FstDecoder.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _FstDecoder.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _FstDecoder.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _FstDecoder.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _FstDecoder.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _FstDecoder.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _FstDecoder.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _FstDecoder.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _FstDecoder.StringVector___nonzero__(self)
    def __bool__(self): return _FstDecoder.StringVector___bool__(self)
    def __len__(self): return _FstDecoder.StringVector___len__(self)
    def pop(self): return _FstDecoder.StringVector_pop(self)
    def __getslice__(self, *args): return _FstDecoder.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _FstDecoder.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _FstDecoder.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _FstDecoder.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _FstDecoder.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _FstDecoder.StringVector___setitem__(self, *args)
    def append(self, *args): return _FstDecoder.StringVector_append(self, *args)
    def empty(self): return _FstDecoder.StringVector_empty(self)
    def size(self): return _FstDecoder.StringVector_size(self)
    def clear(self): return _FstDecoder.StringVector_clear(self)
    def swap(self, *args): return _FstDecoder.StringVector_swap(self, *args)
    def get_allocator(self): return _FstDecoder.StringVector_get_allocator(self)
    def begin(self): return _FstDecoder.StringVector_begin(self)
    def end(self): return _FstDecoder.StringVector_end(self)
    def rbegin(self): return _FstDecoder.StringVector_rbegin(self)
    def rend(self): return _FstDecoder.StringVector_rend(self)
    def pop_back(self): return _FstDecoder.StringVector_pop_back(self)
    def erase(self, *args): return _FstDecoder.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _FstDecoder.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _FstDecoder.StringVector_push_back(self, *args)
    def front(self): return _FstDecoder.StringVector_front(self)
    def back(self): return _FstDecoder.StringVector_back(self)
    def assign(self, *args): return _FstDecoder.StringVector_assign(self, *args)
    def resize(self, *args): return _FstDecoder.StringVector_resize(self, *args)
    def insert(self, *args): return _FstDecoder.StringVector_insert(self, *args)
    def reserve(self, *args): return _FstDecoder.StringVector_reserve(self, *args)
    def capacity(self): return _FstDecoder.StringVector_capacity(self)
    __swig_destroy__ = _FstDecoder.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _FstDecoder.StringVector_swigregister
StringVector_swigregister(StringVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _FstDecoder.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _FstDecoder.FloatVector___nonzero__(self)
    def __bool__(self): return _FstDecoder.FloatVector___bool__(self)
    def __len__(self): return _FstDecoder.FloatVector___len__(self)
    def pop(self): return _FstDecoder.FloatVector_pop(self)
    def __getslice__(self, *args): return _FstDecoder.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _FstDecoder.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _FstDecoder.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _FstDecoder.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _FstDecoder.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _FstDecoder.FloatVector___setitem__(self, *args)
    def append(self, *args): return _FstDecoder.FloatVector_append(self, *args)
    def empty(self): return _FstDecoder.FloatVector_empty(self)
    def size(self): return _FstDecoder.FloatVector_size(self)
    def clear(self): return _FstDecoder.FloatVector_clear(self)
    def swap(self, *args): return _FstDecoder.FloatVector_swap(self, *args)
    def get_allocator(self): return _FstDecoder.FloatVector_get_allocator(self)
    def begin(self): return _FstDecoder.FloatVector_begin(self)
    def end(self): return _FstDecoder.FloatVector_end(self)
    def rbegin(self): return _FstDecoder.FloatVector_rbegin(self)
    def rend(self): return _FstDecoder.FloatVector_rend(self)
    def pop_back(self): return _FstDecoder.FloatVector_pop_back(self)
    def erase(self, *args): return _FstDecoder.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _FstDecoder.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _FstDecoder.FloatVector_push_back(self, *args)
    def front(self): return _FstDecoder.FloatVector_front(self)
    def back(self): return _FstDecoder.FloatVector_back(self)
    def assign(self, *args): return _FstDecoder.FloatVector_assign(self, *args)
    def resize(self, *args): return _FstDecoder.FloatVector_resize(self, *args)
    def insert(self, *args): return _FstDecoder.FloatVector_insert(self, *args)
    def reserve(self, *args): return _FstDecoder.FloatVector_reserve(self, *args)
    def capacity(self): return _FstDecoder.FloatVector_capacity(self)
    __swig_destroy__ = _FstDecoder.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _FstDecoder.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FstToken(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FstToken, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FstToken, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _FstDecoder.new_FstToken()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["logprob"] = _FstDecoder.FstToken_logprob_set
    __swig_getmethods__["logprob"] = _FstDecoder.FstToken_logprob_get
    if _newclass:logprob = _swig_property(_FstDecoder.FstToken_logprob_get, _FstDecoder.FstToken_logprob_set)
    __swig_setmethods__["unemitted_words"] = _FstDecoder.FstToken_unemitted_words_set
    __swig_getmethods__["unemitted_words"] = _FstDecoder.FstToken_unemitted_words_get
    if _newclass:unemitted_words = _swig_property(_FstDecoder.FstToken_unemitted_words_get, _FstDecoder.FstToken_unemitted_words_set)
    __swig_setmethods__["node_idx"] = _FstDecoder.FstToken_node_idx_set
    __swig_getmethods__["node_idx"] = _FstDecoder.FstToken_node_idx_get
    if _newclass:node_idx = _swig_property(_FstDecoder.FstToken_node_idx_get, _FstDecoder.FstToken_node_idx_set)
    __swig_setmethods__["state_dur"] = _FstDecoder.FstToken_state_dur_set
    __swig_getmethods__["state_dur"] = _FstDecoder.FstToken_state_dur_get
    if _newclass:state_dur = _swig_property(_FstDecoder.FstToken_state_dur_get, _FstDecoder.FstToken_state_dur_set)
    def str(self): return _FstDecoder.FstToken_str(self)
    __swig_destroy__ = _FstDecoder.delete_FstToken
    __del__ = lambda self : None;
FstToken_swigregister = _FstDecoder.FstToken_swigregister
FstToken_swigregister(FstToken)

class FstSearchC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FstSearchC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FstSearchC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _FstDecoder.new_FstSearchC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FstDecoder.delete_FstSearchC
    __del__ = lambda self : None;
    def init_search(self): return _FstDecoder.FstSearchC_init_search(self)
    def run(self): return _FstDecoder.FstSearchC_run(self)
    def get_result(self): return _FstDecoder.FstSearchC_get_result(self)
    def get_result_and_logprob(self, *args): return _FstDecoder.FstSearchC_get_result_and_logprob(self, *args)
    def get_best_token_logprob(self): return _FstDecoder.FstSearchC_get_best_token_logprob(self)
    def get_best_final_token_logprob(self): return _FstDecoder.FstSearchC_get_best_final_token_logprob(self)
    def tokens_at_final_states(self): return _FstDecoder.FstSearchC_tokens_at_final_states(self)
    def best_tokens(self, n = 10): return _FstDecoder.FstSearchC_best_tokens(self, n)
    def lna_open(self, *args): return _FstDecoder.FstSearchC_lna_open(self, *args)
    def lna_open_fd(self, *args): return _FstDecoder.FstSearchC_lna_open_fd(self, *args)
    def lna_close(self): return _FstDecoder.FstSearchC_lna_close(self)
    def set_duration_scale(self, *args): return _FstDecoder.FstSearchC_set_duration_scale(self, *args)
    def set_beam(self, *args): return _FstDecoder.FstSearchC_set_beam(self, *args)
    def set_token_limit(self, *args): return _FstDecoder.FstSearchC_set_token_limit(self, *args)
    def set_transition_scale(self, *args): return _FstDecoder.FstSearchC_set_transition_scale(self, *args)
    def set_acoustics(self, *args): return _FstDecoder.FstSearchC_set_acoustics(self, *args)
    def get_duration_scale(self): return _FstDecoder.FstSearchC_get_duration_scale(self)
    def get_beam(self): return _FstDecoder.FstSearchC_get_beam(self)
    def get_token_limit(self): return _FstDecoder.FstSearchC_get_token_limit(self)
    def get_transition_scale(self): return _FstDecoder.FstSearchC_get_transition_scale(self)
    __swig_setmethods__["verbose"] = _FstDecoder.FstSearchC_verbose_set
    __swig_getmethods__["verbose"] = _FstDecoder.FstSearchC_verbose_get
    if _newclass:verbose = _swig_property(_FstDecoder.FstSearchC_verbose_get, _FstDecoder.FstSearchC_verbose_set)
FstSearchC_swigregister = _FstDecoder.FstSearchC_swigregister
FstSearchC_swigregister(FstSearchC)

class FstConfidenceToken(FstToken):
    __swig_setmethods__ = {}
    for _s in [FstToken]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FstConfidenceToken, name, value)
    __swig_getmethods__ = {}
    for _s in [FstToken]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FstConfidenceToken, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _FstDecoder.new_FstConfidenceToken()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["dist_to_best_acu"] = _FstDecoder.FstConfidenceToken_dist_to_best_acu_set
    __swig_getmethods__["dist_to_best_acu"] = _FstDecoder.FstConfidenceToken_dist_to_best_acu_get
    if _newclass:dist_to_best_acu = _swig_property(_FstDecoder.FstConfidenceToken_dist_to_best_acu_get, _FstDecoder.FstConfidenceToken_dist_to_best_acu_set)
    __swig_destroy__ = _FstDecoder.delete_FstConfidenceToken
    __del__ = lambda self : None;
FstConfidenceToken_swigregister = _FstDecoder.FstConfidenceToken_swigregister
FstConfidenceToken_swigregister(FstConfidenceToken)

class FstConfidence(FstSearchC):
    __swig_setmethods__ = {}
    for _s in [FstSearchC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FstConfidence, name, value)
    __swig_getmethods__ = {}
    for _s in [FstSearchC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FstConfidence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _FstDecoder.new_FstConfidence(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_logprob_conf_weight(self, *args): return _FstDecoder.FstConfidence_set_logprob_conf_weight(self, *args)
    def set_logprob_conf_hysteresis(self, *args): return _FstDecoder.FstConfidence_set_logprob_conf_hysteresis(self, *args)
    def run(self): return _FstDecoder.FstConfidence_run(self)
    def result_and_confidence(self): return _FstDecoder.FstConfidence_result_and_confidence(self)
    __swig_destroy__ = _FstDecoder.delete_FstConfidence
    __del__ = lambda self : None;
FstConfidence_swigregister = _FstDecoder.FstConfidence_swigregister
FstConfidence_swigregister(FstConfidence)

class FstConfidenceWithPhoneLoop(FstConfidence):
    __swig_setmethods__ = {}
    for _s in [FstConfidence]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FstConfidenceWithPhoneLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [FstConfidence]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FstConfidenceWithPhoneLoop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _FstDecoder.new_FstConfidenceWithPhoneLoop(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_phone_beam(self, *args): return _FstDecoder.FstConfidenceWithPhoneLoop_set_phone_beam(self, *args)
    def set_phone_token_limit(self, *args): return _FstDecoder.FstConfidenceWithPhoneLoop_set_phone_token_limit(self, *args)
    def set_phone_duration_scale(self, *args): return _FstDecoder.FstConfidenceWithPhoneLoop_set_phone_duration_scale(self, *args)
    def set_phone_loop_logprob_weight(self, *args): return _FstDecoder.FstConfidenceWithPhoneLoop_set_phone_loop_logprob_weight(self, *args)
    def run(self): return _FstDecoder.FstConfidenceWithPhoneLoop_run(self)
    def result_and_confidence(self): return _FstDecoder.FstConfidenceWithPhoneLoop_result_and_confidence(self)
    def init_search(self): return _FstDecoder.FstConfidenceWithPhoneLoop_init_search(self)
    def get_ploop_conf(self): return _FstDecoder.FstConfidenceWithPhoneLoop_get_ploop_conf(self)
    def get_token_conf(self): return _FstDecoder.FstConfidenceWithPhoneLoop_get_token_conf(self)
    def get_edit_conf(self): return _FstDecoder.FstConfidenceWithPhoneLoop_get_edit_conf(self)
    def get_best_acu_conf(self): return _FstDecoder.FstConfidenceWithPhoneLoop_get_best_acu_conf(self)
    __swig_destroy__ = _FstDecoder.delete_FstConfidenceWithPhoneLoop
    __del__ = lambda self : None;
FstConfidenceWithPhoneLoop_swigregister = _FstDecoder.FstConfidenceWithPhoneLoop_swigregister
FstConfidenceWithPhoneLoop_swigregister(FstConfidenceWithPhoneLoop)

# This file is compatible with both classic and new-style classes.


