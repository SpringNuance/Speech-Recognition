# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Decoder', [dirname(__file__)])
        except ImportError:
            import _Decoder
            return _Decoder
        if fp is not None:
            try:
                _mod = imp.load_module('_Decoder', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Decoder = swig_import_helper()
    del swig_import_helper
else:
    import _Decoder
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Decoder.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Decoder.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Decoder.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Decoder.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Decoder.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Decoder.SwigPyIterator_equal(self, *args)
    def copy(self): return _Decoder.SwigPyIterator_copy(self)
    def next(self): return _Decoder.SwigPyIterator_next(self)
    def __next__(self): return _Decoder.SwigPyIterator___next__(self)
    def previous(self): return _Decoder.SwigPyIterator_previous(self)
    def advance(self, *args): return _Decoder.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Decoder.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Decoder.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Decoder.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Decoder.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Decoder.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Decoder.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Decoder.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Decoder.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Decoder.StringVector___nonzero__(self)
    def __bool__(self): return _Decoder.StringVector___bool__(self)
    def __len__(self): return _Decoder.StringVector___len__(self)
    def pop(self): return _Decoder.StringVector_pop(self)
    def __getslice__(self, *args): return _Decoder.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Decoder.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Decoder.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Decoder.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Decoder.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Decoder.StringVector___setitem__(self, *args)
    def append(self, *args): return _Decoder.StringVector_append(self, *args)
    def empty(self): return _Decoder.StringVector_empty(self)
    def size(self): return _Decoder.StringVector_size(self)
    def clear(self): return _Decoder.StringVector_clear(self)
    def swap(self, *args): return _Decoder.StringVector_swap(self, *args)
    def get_allocator(self): return _Decoder.StringVector_get_allocator(self)
    def begin(self): return _Decoder.StringVector_begin(self)
    def end(self): return _Decoder.StringVector_end(self)
    def rbegin(self): return _Decoder.StringVector_rbegin(self)
    def rend(self): return _Decoder.StringVector_rend(self)
    def pop_back(self): return _Decoder.StringVector_pop_back(self)
    def erase(self, *args): return _Decoder.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Decoder.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Decoder.StringVector_push_back(self, *args)
    def front(self): return _Decoder.StringVector_front(self)
    def back(self): return _Decoder.StringVector_back(self)
    def assign(self, *args): return _Decoder.StringVector_assign(self, *args)
    def resize(self, *args): return _Decoder.StringVector_resize(self, *args)
    def insert(self, *args): return _Decoder.StringVector_insert(self, *args)
    def reserve(self, *args): return _Decoder.StringVector_reserve(self, *args)
    def capacity(self): return _Decoder.StringVector_capacity(self)
    __swig_destroy__ = _Decoder.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _Decoder.StringVector_swigregister
StringVector_swigregister(StringVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Decoder.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Decoder.FloatVector___nonzero__(self)
    def __bool__(self): return _Decoder.FloatVector___bool__(self)
    def __len__(self): return _Decoder.FloatVector___len__(self)
    def pop(self): return _Decoder.FloatVector_pop(self)
    def __getslice__(self, *args): return _Decoder.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Decoder.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Decoder.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Decoder.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Decoder.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Decoder.FloatVector___setitem__(self, *args)
    def append(self, *args): return _Decoder.FloatVector_append(self, *args)
    def empty(self): return _Decoder.FloatVector_empty(self)
    def size(self): return _Decoder.FloatVector_size(self)
    def clear(self): return _Decoder.FloatVector_clear(self)
    def swap(self, *args): return _Decoder.FloatVector_swap(self, *args)
    def get_allocator(self): return _Decoder.FloatVector_get_allocator(self)
    def begin(self): return _Decoder.FloatVector_begin(self)
    def end(self): return _Decoder.FloatVector_end(self)
    def rbegin(self): return _Decoder.FloatVector_rbegin(self)
    def rend(self): return _Decoder.FloatVector_rend(self)
    def pop_back(self): return _Decoder.FloatVector_pop_back(self)
    def erase(self, *args): return _Decoder.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Decoder.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Decoder.FloatVector_push_back(self, *args)
    def front(self): return _Decoder.FloatVector_front(self)
    def back(self): return _Decoder.FloatVector_back(self)
    def assign(self, *args): return _Decoder.FloatVector_assign(self, *args)
    def resize(self, *args): return _Decoder.FloatVector_resize(self, *args)
    def insert(self, *args): return _Decoder.FloatVector_insert(self, *args)
    def reserve(self, *args): return _Decoder.FloatVector_reserve(self, *args)
    def capacity(self): return _Decoder.FloatVector_capacity(self)
    __swig_destroy__ = _Decoder.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _Decoder.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class Hypo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hypo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hypo, name)
    __repr__ = _swig_repr
    def log_prob(self): return _Decoder.Hypo_log_prob(self)
    def frame(self): return _Decoder.Hypo_frame(self)
    def __init__(self): 
        this = _Decoder.new_Hypo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Decoder.delete_Hypo
    __del__ = lambda self : None;
Hypo_swigregister = _Decoder.Hypo_swigregister
Hypo_swigregister(Hypo)

class LM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LM, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Decoder.new_LM()
        try: self.this.append(this)
        except: self.this = this
    def read_arpa(self, *args): return _Decoder.LM_read_arpa(self, *args)
    def read(self, *args): return _Decoder.LM_read(self, *args)
    def initial_node_id(self): return _Decoder.LM_initial_node_id(self)
    def walk(self, *args): return _Decoder.LM_walk(self, *args)
    def sym(self, *args): return _Decoder.LM_sym(self, *args)
    __swig_destroy__ = _Decoder.delete_LM
    __del__ = lambda self : None;
LM_swigregister = _Decoder.LM_swigregister
LM_swigregister(LM)

class HypoStack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypoStack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HypoStack, name)
    __repr__ = _swig_repr
    def at(self, *args): return _Decoder.HypoStack_at(self, *args)
    def front(self): return _Decoder.HypoStack_front(self)
    def back(self): return _Decoder.HypoStack_back(self)
    def size(self): return _Decoder.HypoStack_size(self)
    def empty(self): return _Decoder.HypoStack_empty(self)
    def find_similar(self, *args): return _Decoder.HypoStack_find_similar(self, *args)
    def sorted_insert(self, *args): return _Decoder.HypoStack_sorted_insert(self, *args)
    def __init__(self): 
        this = _Decoder.new_HypoStack()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Decoder.delete_HypoStack
    __del__ = lambda self : None;
HypoStack_swigregister = _Decoder.HypoStack_swigregister
HypoStack_swigregister(HypoStack)

class Expander(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expander, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expander, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Decoder.delete_Expander
    __del__ = lambda self : None;
Expander_swigregister = _Decoder.Expander_swigregister
Expander_swigregister(Expander)

class Toolbox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Toolbox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Toolbox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Decoder.new_Toolbox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Decoder.delete_Toolbox
    __del__ = lambda self : None;
    def hmms(self): return _Decoder.Toolbox_hmms(self)
    def lex_read(self, *args): return _Decoder.Toolbox_lex_read(self, *args)
    def lex_word(self): return _Decoder.Toolbox_lex_word(self)
    def lex_phone(self): return _Decoder.Toolbox_lex_phone(self)
    def interpolated_ngram_read(self, *args): return _Decoder.Toolbox_interpolated_ngram_read(self, *args)
    def interpolated_lookahead_ngram_read(self, *args): return _Decoder.Toolbox_interpolated_lookahead_ngram_read(self, *args)
    def ngram_read(self, *args): return _Decoder.Toolbox_ngram_read(self, *args)
    def htk_lattice_grammar_read(self, *args): return _Decoder.Toolbox_htk_lattice_grammar_read(self, *args)
    def fsa_lm_read(self, *args): return _Decoder.Toolbox_fsa_lm_read(self, *args)
    def read_word_classes(self, *args): return _Decoder.Toolbox_read_word_classes(self, *args)
    def read_lookahead_ngram(self, *args): return _Decoder.Toolbox_read_lookahead_ngram(self, *args)
    def lna_open(self, *args): return _Decoder.Toolbox_lna_open(self, *args)
    def lna_open_fd(self, *args): return _Decoder.Toolbox_lna_open_fd(self, *args)
    def lna_close(self): return _Decoder.Toolbox_lna_close(self)
    def lna_seek(self, *args): return _Decoder.Toolbox_lna_seek(self, *args)
    def acoustics(self): return _Decoder.Toolbox_acoustics(self)
    def use_one_frame_acoustics(self): return _Decoder.Toolbox_use_one_frame_acoustics(self)
    def set_one_frame(self, *args): return _Decoder.Toolbox_set_one_frame(self, *args)
    def expand(self, *args): return _Decoder.Toolbox_expand(self, *args)
    def best_word(self): return _Decoder.Toolbox_best_word(self)
    def print_words(self, *args): return _Decoder.Toolbox_print_words(self, *args)
    def find_word(self, *args): return _Decoder.Toolbox_find_word(self, *args)
    def init(self, *args): return _Decoder.Toolbox_init(self, *args)
    def reset(self, *args): return _Decoder.Toolbox_reset(self, *args)
    def set_end(self, *args): return _Decoder.Toolbox_set_end(self, *args)
    def expand_stack(self, *args): return _Decoder.Toolbox_expand_stack(self, *args)
    def expand_words(self, *args): return _Decoder.Toolbox_expand_words(self, *args)
    def go(self, *args): return _Decoder.Toolbox_go(self, *args)
    def run(self): return _Decoder.Toolbox_run(self)
    def runto(self, *args): return _Decoder.Toolbox_runto(self, *args)
    def recognize_segment(self, *args): return _Decoder.Toolbox_recognize_segment(self, *args)
    def frame(self): return _Decoder.Toolbox_frame(self)
    def first_frame(self): return _Decoder.Toolbox_first_frame(self)
    def last_frame(self): return _Decoder.Toolbox_last_frame(self)
    def stack(self, *args): return _Decoder.Toolbox_stack(self, *args)
    def paths(self): return _Decoder.Toolbox_paths(self)
    def write_word_graph(self, *args): return _Decoder.Toolbox_write_word_graph(self, *args)
    def print_best_lm_history(self): return _Decoder.Toolbox_print_best_lm_history(self)
    def print_best_lm_history_to_file(self, *args): return _Decoder.Toolbox_print_best_lm_history_to_file(self, *args)
    def best_hypo_string(self, *args): return _Decoder.Toolbox_best_hypo_string(self, *args)
    def best_timed_hypo_string(self, *args): return _Decoder.Toolbox_best_timed_hypo_string(self, *args)
    def write_state_segmentation(self, *args): return _Decoder.Toolbox_write_state_segmentation(self, *args)
    def set_forced_end(self, *args): return _Decoder.Toolbox_set_forced_end(self, *args)
    def set_hypo_limit(self, *args): return _Decoder.Toolbox_set_hypo_limit(self, *args)
    def set_prune_similar(self, *args): return _Decoder.Toolbox_set_prune_similar(self, *args)
    def set_word_limit(self, *args): return _Decoder.Toolbox_set_word_limit(self, *args)
    def set_word_beam(self, *args): return _Decoder.Toolbox_set_word_beam(self, *args)
    def set_lm_scale(self, *args): return _Decoder.Toolbox_set_lm_scale(self, *args)
    def set_lm_offset(self, *args): return _Decoder.Toolbox_set_lm_offset(self, *args)
    def set_unk_offset(self, *args): return _Decoder.Toolbox_set_unk_offset(self, *args)
    def set_token_limit(self, *args): return _Decoder.Toolbox_set_token_limit(self, *args)
    def set_state_beam(self, *args): return _Decoder.Toolbox_set_state_beam(self, *args)
    def set_duration_scale(self, *args): return _Decoder.Toolbox_set_duration_scale(self, *args)
    def set_transition_scale(self, *args): return _Decoder.Toolbox_set_transition_scale(self, *args)
    def set_rabiner_post_mode(self, *args): return _Decoder.Toolbox_set_rabiner_post_mode(self, *args)
    def set_hypo_beam(self, *args): return _Decoder.Toolbox_set_hypo_beam(self, *args)
    def set_global_beam(self, *args): return _Decoder.Toolbox_set_global_beam(self, *args)
    def set_word_end_beam(self, *args): return _Decoder.Toolbox_set_word_end_beam(self, *args)
    def set_eq_depth_beam(self, *args): return _Decoder.Toolbox_set_eq_depth_beam(self, *args)
    def set_eq_word_count_beam(self, *args): return _Decoder.Toolbox_set_eq_word_count_beam(self, *args)
    def set_fan_in_beam(self, *args): return _Decoder.Toolbox_set_fan_in_beam(self, *args)
    def set_fan_out_beam(self, *args): return _Decoder.Toolbox_set_fan_out_beam(self, *args)
    def set_tp_state_beam(self, *args): return _Decoder.Toolbox_set_tp_state_beam(self, *args)
    def set_max_state_duration(self, *args): return _Decoder.Toolbox_set_max_state_duration(self, *args)
    def set_split_multiwords(self, *args): return _Decoder.Toolbox_set_split_multiwords(self, *args)
    def set_cross_word_triphones(self, *args): return _Decoder.Toolbox_set_cross_word_triphones(self, *args)
    def set_silence_is_word(self, *args): return _Decoder.Toolbox_set_silence_is_word(self, *args)
    def set_ignore_case(self, *args): return _Decoder.Toolbox_set_ignore_case(self, *args)
    def set_lm_lookahead(self, *args): return _Decoder.Toolbox_set_lm_lookahead(self, *args)
    def set_insertion_penalty(self, *args): return _Decoder.Toolbox_set_insertion_penalty(self, *args)
    def set_print_text_result(self, *args): return _Decoder.Toolbox_set_print_text_result(self, *args)
    def set_print_state_segmentation(self, *args): return _Decoder.Toolbox_set_print_state_segmentation(self, *args)
    def set_keep_state_segmentation(self, *args): return _Decoder.Toolbox_set_keep_state_segmentation(self, *args)
    def set_verbose(self, *args): return _Decoder.Toolbox_set_verbose(self, *args)
    def set_print_probs(self, *args): return _Decoder.Toolbox_set_print_probs(self, *args)
    def set_print_indices(self, *args): return _Decoder.Toolbox_set_print_indices(self, *args)
    def set_print_frames(self, *args): return _Decoder.Toolbox_set_print_frames(self, *args)
    def set_multiple_endings(self, *args): return _Decoder.Toolbox_set_multiple_endings(self, *args)
    def set_word_boundary(self, *args): return _Decoder.Toolbox_set_word_boundary(self, *args)
    def set_sentence_boundary(self, *args): return _Decoder.Toolbox_set_sentence_boundary(self, *args)
    def clear_hesitation_words(self): return _Decoder.Toolbox_clear_hesitation_words(self)
    def add_hesitation_word(self, *args): return _Decoder.Toolbox_add_hesitation_word(self, *args)
    def set_dummy_word_boundaries(self, *args): return _Decoder.Toolbox_set_dummy_word_boundaries(self, *args)
    def set_generate_word_graph(self, *args): return _Decoder.Toolbox_set_generate_word_graph(self, *args)
    def set_use_word_pair_approximation(self, *args): return _Decoder.Toolbox_set_use_word_pair_approximation(self, *args)
    def set_use_lm_cache(self, *args): return _Decoder.Toolbox_set_use_lm_cache(self, *args)
    def set_require_sentence_end(self, *args): return _Decoder.Toolbox_set_require_sentence_end(self, *args)
    def set_remove_pronunciation_id(self, *args): return _Decoder.Toolbox_set_remove_pronunciation_id(self, *args)
    def set_optional_short_silence(self, *args): return _Decoder.Toolbox_set_optional_short_silence(self, *args)
    def prune_lm_lookahead_buffers(self, *args): return _Decoder.Toolbox_prune_lm_lookahead_buffers(self, *args)
    def print_prunings(self): return _Decoder.Toolbox_print_prunings(self)
    def print_hypo(self, *args): return _Decoder.Toolbox_print_hypo(self, *args)
    def print_sure(self): return _Decoder.Toolbox_print_sure(self)
    def write_word_history(self, *args): return _Decoder.Toolbox_write_word_history(self, *args)
    def print_lm_history(self): return _Decoder.Toolbox_print_lm_history(self)
    def print_tp_lex_node(self, *args): return _Decoder.Toolbox_print_tp_lex_node(self, *args)
    def print_tp_lex_lookahead(self, *args): return _Decoder.Toolbox_print_tp_lex_lookahead(self, *args)
    def debug_print_best_lm_history(self): return _Decoder.Toolbox_debug_print_best_lm_history(self)
Toolbox_swigregister = _Decoder.Toolbox_swigregister
Toolbox_swigregister(Toolbox)

# This file is compatible with both classic and new-style classes.


